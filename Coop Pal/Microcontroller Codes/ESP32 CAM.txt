#define CAMERA_MODEL_AI_THINKER 

#include "esp_camera.h"
#include <WiFi.h>
#include <HTTPClient.h>
#include <WebServer.h>
#include "camera_pins.h"  

/*
// Wi-Fi
const char* ssid = "BIBOSO (2.4G)";
const char* password = "Vaughnzen123+";
const char* serverName = "http://192.168.1.5/coop_pal/upload.php";
*/

// Hotspot: Coop Pal
const char* ssid = "Coop Pal";
const char* password = "";
const char* serverName = "http://192.168.20.178/coop_pal/upload.php"; 

// Hotspot: Smart Harvest
/*
const char* ssid = "SMARTHARVEST";
const char* password = "11111111";
const char* serverName = "http://192.168.87.178/coop_pal/upload.php"; 
*/

WebServer server(80);
unsigned long lastCaptureTime = 0;
const unsigned long captureInterval = 10000; // 10 seconds

void startCameraServer();
void captureAndSendPhoto();

void setup() {
    Serial.begin(115200);
    Serial.setDebugOutput(true);
    Serial.println();
    
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }
    
    Serial.println();
    Serial.print("WiFi connected: ");
    Serial.println(WiFi.localIP());
    Serial.print("Live Stream: http://");
    Serial.print(WiFi.localIP());
    Serial.println("/stream");
    
    camera_config_t config;
    config.ledc_channel = LEDC_CHANNEL_0;
    config.ledc_timer = LEDC_TIMER_0;
    config.pin_d0 = Y2_GPIO_NUM;
    config.pin_d1 = Y3_GPIO_NUM;
    config.pin_d2 = Y4_GPIO_NUM;
    config.pin_d3 = Y5_GPIO_NUM;
    config.pin_d4 = Y6_GPIO_NUM;
    config.pin_d5 = Y7_GPIO_NUM;
    config.pin_d6 = Y8_GPIO_NUM;
    config.pin_d7 = Y9_GPIO_NUM;
    config.pin_xclk = XCLK_GPIO_NUM;
    config.pin_pclk = PCLK_GPIO_NUM;
    config.pin_vsync = VSYNC_GPIO_NUM;
    config.pin_href = HREF_GPIO_NUM;
    config.pin_sscb_sda = SIOD_GPIO_NUM;
    config.pin_sscb_scl = SIOC_GPIO_NUM;
    config.pin_pwdn = PWDN_GPIO_NUM;
    config.pin_reset = RESET_GPIO_NUM;
    config.xclk_freq_hz = 20000000;
    config.pixel_format = PIXFORMAT_JPEG;
    
    if (psramFound()) {
        config.frame_size = FRAMESIZE_UXGA;
        config.jpeg_quality = 10;
        config.fb_count = 2;
    } else {
        config.frame_size = FRAMESIZE_SVGA;
        config.jpeg_quality = 12;
        config.fb_count = 1;
    }
    
    esp_err_t err = esp_camera_init(&config);
    if (err != ESP_OK) {
        Serial.printf("Camera init failed with error 0x%x", err);
        return;
    }
    
    Serial.println("Camera Ready!");
    startCameraServer();
}

void loop() {
    server.handleClient();
    
    if (millis() - lastCaptureTime >= captureInterval) {
        lastCaptureTime = millis();
        captureAndSendPhoto();
    }
}

void captureAndSendPhoto() {
    if (WiFi.status() == WL_CONNECTED) {
        camera_fb_t * fb = esp_camera_fb_get();
        if (!fb) {
            Serial.println("Camera capture failed");
            return;
        }
        
        HTTPClient http;
        http.begin(serverName);
        http.addHeader("Content-Type", "multipart/form-data; boundary=ESP32CamBoundary");

        String head = "--ESP32CamBoundary\r\nContent-Disposition: form-data; name=\"photo\"; filename=\"photo.jpg\"\r\nContent-Type: image/jpeg\r\n\r\n";
        String tail = "\r\n--ESP32CamBoundary--\r\n";
        int contentLength = head.length() + fb->len + tail.length();

        http.addHeader("Content-Length", String(contentLength));

        uint8_t* payload = (uint8_t*) malloc(contentLength);
        memcpy(payload, head.c_str(), head.length());
        memcpy(payload + head.length(), fb->buf, fb->len);
        memcpy(payload + head.length() + fb->len, tail.c_str(), tail.length());

        int httpResponseCode = http.POST(payload, contentLength);
        
        if (httpResponseCode > 0) {
            String response = http.getString();
            Serial.println(httpResponseCode);
            Serial.println(response);
        } else {
            Serial.print("Error on sending POST: ");
            Serial.println(httpResponseCode);
        }

        free(payload);
        esp_camera_fb_return(fb);
        http.end();
    } else {
        Serial.println("WiFi Disconnected");
    }
}

void startCameraServer() {
    server.on("/", HTTP_GET, []() {
        server.send(200, "text/html", "<html><body><h1>ESP32-CAM Live Stream</h1><img src='/stream'></body></html>");
    });
    
    server.on("/stream", HTTP_GET, []() {
        WiFiClient client = server.client();
        if (!client.connected()) return;
        
        String response = "HTTP/1.1 200 OK\r\n";
        response += "Content-Type: multipart/x-mixed-replace; boundary=frame\r\n\r\n";
        server.sendContent(response);
        
        while (client.connected()) {
            camera_fb_t * fb = esp_camera_fb_get();
            if (!fb) continue;
            
            response = "--frame\r\n";
            response += "Content-Type: image/jpeg\r\n";
            response += "Content-Length: " + String(fb->len) + "\r\n\r\n";
            server.sendContent(response);
            server.sendContent((const char*)fb->buf, fb->len);
            server.sendContent("\r\n");
            
            esp_camera_fb_return(fb);
        }
    });
    
    server.begin();
    Serial.println("Camera streaming started.");
}